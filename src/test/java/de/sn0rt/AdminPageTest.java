package de.sn0rt;

import io.quarkus.test.junit.QuarkusTest;
import io.restassured.http.ContentType;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;

@QuarkusTest
class AdminPageTest
{
	@Inject
	ShortUrlRepository repository;

	@BeforeEach
	@Transactional
	void setup()
	{
		repository.deleteAll();
	}

	@AfterEach
	@Transactional
	void cleanup()
	{
		repository.deleteAll();
	}

	@Test
	void testGetAdminPageReturnsHtml()
	{
		// given
		// empty database

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("sn0rt"))
			.body(containsString("Create Short URL"))
			.body(containsString("All Short URLs (0)"));
	}

	@Test
	void testGetAdminPageDisplaysExistingUrls()
	{
		// given
		createShortUrl("https://example.com/test1", "code1");
		createShortUrl("https://example.com/test2", "code2");

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("All Short URLs (2)"))
			.body(containsString("/code1"))
			.body(containsString("/code2"))
			.body(containsString("https://example.com/test1"))
			.body(containsString("https://example.com/test2"))
			.body(containsString("0 clicks"))
			.body(containsString("data:image/png;base64,")) // QR code present
			.body(containsString("/admin/qr/code1/pdf")) // PDF download link
			.body(containsString("/admin/qr/code2/pdf"));
	}

	@Test
	void testGetAdminPageDisplaysClickCounts()
	{
		// given
		createShortUrlWithClicks("https://example.com/popular", "popular", 42L);

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("/popular"))
			.body(containsString("42 clicks"));
	}

	@Test
	void testCreateShortUrlWithAutoGeneratedCode()
	{
		// given
		String testUrl = "https://example.com/test";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", testUrl)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.header("Location", containsString("/admin?success="));
	}

	@Test
	void testCreateShortUrlWithCustomCode()
	{
		// given
		String testUrl = "https://example.com/custom";
		String customCode = "mycustom";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", testUrl)
			.formParam("customCode", customCode)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.header("Location", containsString("/admin?success="))
			.header("Location", containsString(customCode));
	}

	@Test
	void testCreateShortUrlWithMissingUrl()
	{
		// given
		// no url provided

		// when & then
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.header("Location", containsString("/admin?error="))
			.header("Location", containsString("URL"));
	}

	@Test
	void testCreateShortUrlWithBlankUrl()
	{
		// given
		String blankUrl = "   ";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", blankUrl)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.header("Location", containsString("/admin?error="));
	}

	@Test
	void testCreateShortUrlWithDuplicateCustomCode()
	{
		// given
		String existingCode = "existing";
		createShortUrl("https://example.com/first", existingCode);

		// when & then
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", "https://example.com/second")
			.formParam("customCode", existingCode)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.header("Location", containsString("/admin?error="))
			.header("Location", containsString("already"));
	}

	@Test
	void testAdminPageDisplaysSuccessMessage()
	{
		// given
		String successMessage = "Short URL created: test123";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.queryParam("success", successMessage)
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("alert-success"))
			.body(containsString(successMessage));
	}

	@Test
	void testAdminPageDisplaysErrorMessage()
	{
		// given
		String errorMessage = "Custom code already exists";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.queryParam("error", errorMessage)
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("alert-error"))
			.body(containsString(errorMessage));
	}

	@Test
	void testAdminPageDisplaysCreatedTimestamp()
	{
		// given
		createShortUrl("https://example.com/timestamped", "timed");

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("Created:"))
			.body(containsString("/timed"));
	}

	@Test
	void testAdminPageDisplaysEmptyStateMessage()
	{
		// given
		// empty database

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.contentType(ContentType.HTML)
			.body(containsString("No short URLs created yet"))
			.body(containsString("Create your first one above"));
	}

	@Test
	void testFormSubmissionCreatesUrlInDatabase()
	{
		// given
		String testUrl = "https://example.com/dbtest";
		String customCode = "dbtest";

		// when
		given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", testUrl)
			.formParam("customCode", customCode)
			.when()
			.post("/admin")
			.then()
			.statusCode(303);

		// then
		ShortUrl saved = repository.findByShortCode(customCode).orElseThrow();
		assert saved.originalUrl.equals(testUrl);
		assert saved.shortCode.equals(customCode);
		assert saved.clickCount == 0L;
	}

	@Test
	void testUrlEncodingInRedirectParameters()
	{
		// given
		String testUrl = "https://example.com/test";
		String customCode = "test-code";

		// when & then
		String location = given()
			.auth().basic("admin", "admin")
			.redirects().follow(false)
			.contentType(ContentType.URLENC)
			.formParam("url", testUrl)
			.formParam("customCode", customCode)
			.when()
			.post("/admin")
			.then()
			.statusCode(303)
			.extract()
			.header("Location");

		// then - verify URL encoding is properly applied (spaces become + or
		// %20)
		assert location.contains("success=");
		assert !location.contains(" "); // no raw spaces in URL
	}

	@Test
	void testDownloadQrCodePdf()
	{
		// given
		String testUrl = "https://example.com/pdftest";
		String shortCode = "pdfcode";
		createShortUrl(testUrl, shortCode);

		// when & then
		byte[] pdf = given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin/qr/" + shortCode + "/pdf")
			.then()
			.statusCode(200)
			.contentType("application/pdf")
			.header("Content-Disposition", containsString("attachment"))
			.header("Content-Disposition", containsString("qr-" + shortCode + ".pdf"))
			.extract()
			.asByteArray();

		// then
		assert pdf.length > 0;
		// Verify it's a PDF by checking magic number
		assert pdf[0] == 0x25 && pdf[1] == 0x50 && pdf[2] == 0x44 && pdf[3] == 0x46; // %PDF
	}

	@Test
	void testDownloadQrCodePdfNotFound()
	{
		// given
		String nonExistentCode = "notfound";

		// when & then
		given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin/qr/" + nonExistentCode + "/pdf")
			.then()
			.statusCode(404);
	}

	@Test
	void testQrCodeDisplayedInAdminPage()
	{
		// given
		createShortUrl("https://example.com/qrtest", "qrtest");

		// when & then
		String html = given()
			.auth().basic("admin", "admin")
			.when()
			.get("/admin")
			.then()
			.statusCode(200)
			.extract()
			.asString();

		// then - verify QR code is present as base64 image
		assert html.contains("data:image/png;base64,");
		assert html.contains("qr-code-image");
		assert html.contains("/admin/qr/qrtest/pdf");
	}

	@Test
	void testAdminPageRequiresAuthentication()
	{
		// given
		// no authentication

		// when & then
		given()
			.when()
			.get("/admin")
			.then()
			.statusCode(401);
	}

	@Test
	void testAdminPageRejectsWrongPassword()
	{
		// given
		// wrong password

		// when & then
		given()
			.auth().basic("admin", "wrongpassword")
			.when()
			.get("/admin")
			.then()
			.statusCode(401);
	}

	// Helper methods

	@Transactional
	void createShortUrl(String originalUrl, String shortCode)
	{
		ShortUrl shortUrl = new ShortUrl(shortCode, originalUrl);
		repository.persist(shortUrl);
	}

	@Transactional
	void createShortUrlWithClicks(String originalUrl, String shortCode, Long clickCount)
	{
		ShortUrl shortUrl = new ShortUrl(shortCode, originalUrl);
		shortUrl.clickCount = clickCount;
		repository.persist(shortUrl);
	}
}
